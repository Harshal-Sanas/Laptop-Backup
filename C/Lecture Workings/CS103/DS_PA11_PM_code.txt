#include<stdio.h>
#include<stdlib.h>

typedef struct binarytree{
  int key;
  struct binarytree*left;
  struct binarytree*right;
  struct binarytree*parent;
}tree;

tree*BuildBT(int key,tree*parent,tree*left,tree*right){
    tree*temp=NULL;
    temp=(tree*)calloc(1,sizeof(tree));
    temp->key=key;
    temp->left=left;
    temp->right=right;
    temp->parent=parent;
    return temp;
}

tree* newNode(int key) {
    tree* node = (tree*)malloc(sizeof(tree));
    node->key = key;
    node->left = node->right = NULL;
    return node;
}

int search(int arr[], int start, int end, int x) {
    int i;
    for (i = start; i <= end; i++) {
        if (arr[i] == x) {
            return i;
        }
    }
    return -1;
}

tree* buildHelperPostIn(int inorder[], int postorder[], int inStart, int inEnd, int* postIndex) {

    if (inStart > inEnd) {
        return NULL;
    }

    tree* node = newNode(postorder[(*postIndex)]);
    (*postIndex)--;

    if (inStart == inEnd) {
        return node;
    }

    int inIndex = search(inorder, inStart, inEnd, node->key);

    node->right = buildHelperPostIn(inorder, postorder, inIndex + 1, inEnd, postIndex);
    node->left = buildHelperPostIn(inorder, postorder, inStart, inIndex - 1, postIndex);

    return node;
}

tree* buildPostIn(int* inorder, int inorderSize, int* postorder, int postorderSize) {
     int postIndex = postorderSize - 1;
    return buildHelperPostIn(inorder, postorder, 0, inorderSize - 1, &postIndex);
}

tree* buildHelperPreIn(int preorder[], int inorder[], int inStart, int inEnd, int* preIndex) {
    // Base case
    if (inStart > inEnd) {
        return NULL;
    }

    tree* node = newNode(preorder[(*preIndex)]);
    (*preIndex)++;

    if (inStart == inEnd) {
        return node;
    }

    int inIndex = search(inorder, inStart, inEnd, node->key );

    node->left = buildHelperPreIn(preorder, inorder, inStart, inIndex - 1, preIndex);
    node->right = buildHelperPreIn(preorder, inorder, inIndex + 1, inEnd, preIndex);

    return node;
}

tree* buildPreIn(int* preorder, int preorderSize, int* inorder, int inorderSize) {
    int preIndex = 0;
    return buildHelperPreIn(preorder, inorder, 0, inorderSize - 1, &preIndex);
}

int max(int a,int b){
 if(a>b) return a;
 else return b;
}

int height(tree*root){
   if(!root) return 0;
   if(root->left==NULL&&root->right==NULL) return 0;
   int leftheight=height(root->left);
   int rightheight=height(root->right);
   return max(leftheight,rightheight)+1;
}

int balancefactor(tree*root){
   if(!root) return 0;
   return height(root->left)-height(root->right);
}

tree*leftrotate(tree*x){
   tree*y=x->right;
   tree*T2=y->left;
   x->right=T2;
   y->left=x;
   return y;
}

tree*rightrotate(tree*y){
   tree*x=y->left;
   tree*T2=x->right;
   x->right=y;
   y->left=T2;
   return x;
}

tree*insertintoAVLtree(tree*root,int key){
   if(!root) return BuildBT(key,NULL,NULL,NULL);
   if(key<root->key)
     root->left=insertintoAVLtree(root->left,key);
   if(key>root->key)
     root->right=insertintoAVLtree(root->right,key);
   int balance=balancefactor(root);
   if(balance>1 && key<root->left->key) //LL insertion
     return rightrotate(root);
   if(balance<-1 && key>root->right->key) //RR insertion
     return leftrotate(root);
   if(balance>1 && key>root->left->key){  //LR insertion
     root->left=leftrotate(root->left);
     return rightrotate(root);}
   if(balance<-1 && key<root->right->key){  //RL insertion
     root->right=rightrotate(root->right);
     return leftrotate(root);}
    return root;
}

tree*findMinTreeInBST(tree*root){
   if(!root) return NULL;
   while(root){
    root=root->left;
   }
   return root;
}

tree* deleteFromAVLT(tree* root, int key){
   if (!root) return NULL;
   if (key < root -> key)
		root -> left = deleteFromAVLT(root -> left, key);
	  if (key > root -> key)
		root -> right = deleteFromAVLT(root -> right, key);
    if (key == root -> key){
        if (root -> left == NULL && root -> right == NULL){
            free(root);
            return NULL;
        }
        else if (root -> left == NULL){
            tree* t = root;
            root= root -> right;
            free(t);
        }
        else if (root -> right == NULL){
            tree* t = root;
            root = root -> left;
            free(t);
        }
        else {
            tree* t = findMinTreeInBST(root -> right);
            root -> key = t -> key;
            root -> right = deleteFromAVLT(root -> right, t -> key);
        }
    }

    //tree -> height = 1 + max(height(tree -> left), height(tree -> right));
    int bf = balancefactor(root);

    if (bf > 1 && balancefactor(root -> left) >= 0){  
        return rightrotate(root);
    }
    if (bf < -1 && balancefactor(root -> right) <= 0){
        return leftrotate(root);
    }
    if (bf > 1 && balancefactor(root -> left) < 0){   
        root -> left = leftrotate(root -> left);
        return rightrotate(root);
    }
    if (bf < -1 && balancefactor(root -> right) > 0){ 
        root -> right = rightrotate(root -> right);
        return leftrotate(root);
    }
    return root;
}

void printInOrder(tree*root){
   if(!root) return;
   printInOrder(root->left);
   printf("%d ",root->key);
   printInOrder(root->right);
}

void printPreorder(tree* root) {
    if (!root) return;
    printf("%d ", root->key);
    printPreorder(root->left);
    printPreorder(root->right);
}

void main(){
  tree*root=NULL;int size;int inarr[100];int prearr[100];int postarr[100];
  int choice,key,i;
  while(1){
    printf("\n1.build a BST using inorder and PostOrder");
    printf("\n2.build a BST using inorder and PreOrder");
    printf("\n3.to enter a node in a AVL tree ");
    printf("\n4.to delete a node in a AVL tree ");
    printf("\n5.to print the inorder of the BST");
    printf("\n6.to print the preorder of the BST");
    printf("\nEnter a choice:");
    scanf("%d",&choice);
    switch(choice){
      case 1:{
          printf("\nthe number of elements you want in inorder:");
          scanf("%d",&size);
          printf("\nenter the elements in the inorder array:");
          for(i=0;i<size;i++){
            scanf("%d",&inarr[i]);
          }
          printf("\nenter the elements in the postorder array:");
          for(i=0;i<size;i++){
            scanf("%d",&postarr[i]);
          }
          root=buildPostIn(inarr,size,postarr,size);
          break;
      }
      case 2:{
          printf("\nthe number of elements you want in inorder:");
          scanf("%d",&size);
          printf("\nenter the elements in the inorder array:");
          for(i=0;i<size;i++){
            scanf("%d",&inarr[i]);
          }
          printf("\nenter the elements in the preorder array:");
          for(i=0;i<size;i++){
            scanf("%d",&postarr[i]);
          }
          root=buildPreIn(inarr,size,prearr,size);
          break;
      }
      case 3:{
          printf("\nenter a key value for the AVL tree:");
          scanf("%d",&key);
          root=insertintoAVLtree(root,key);
          break;
      }
      case 4:{
          printf("\nenter a key value that you want to delete:");
          scanf("%d",&key);
          root=deleteFromAVLT(root,key);
          break;
      }
      case 5:{
          printf("\nthe inorder traversal of the binary search tree:");
          printInOrder(root);
          break;
      }
      case 6:{
          printf("\nthe preorder traversal of the binary search tree:");
          printPreorder(root);
          break;
      }
    }
  }
}